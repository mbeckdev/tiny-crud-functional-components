{"version":3,"sources":["App.js","index.js"],"names":["App","useState","text","id","uniqid","isEditing","tasks","setTasks","handleEditChange","e","thisTask","theIndex","findIndex","item","newTasks","target","value","handleEditSubmit","preventDefault","className","map","aTask","editChange","editSubmit","editHandler","handleEditClick","deleteHandler","filter","handleDeleteClick","onClick","ViewTemplate","EditTemplate","onSubmit","autoFocus","type","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAyIeA,MApIf,WAAgB,IAAD,EACaC,mBAAS,CACjC,CACEC,KAAM,QACNC,GAAIC,MACJC,WAAW,GAEb,CACEH,KAAM,SACNC,GAAIC,MACJC,WAAW,GAEb,CACEH,KAAM,QACNC,GAAIC,MACJC,WAAW,KAfF,mBACNC,EADM,KACCC,EADD,KAyEb,SAASC,EAAiBC,EAAGC,GAC3B,IAAIC,EAAWL,EAAMM,WAAU,SAACC,GAAD,OAAUA,EAAKV,KAAOO,EAASP,MAC1DW,EAAWR,EACfQ,EAASH,GAAUT,KAAOO,EAAEM,OAAOC,MAGnCT,GAAS,8BAAUO,MAGrB,IAAMG,EAAmB,SAACR,EAAGC,GAE3BD,EAAES,iBAGF,IAAIP,EAAWL,EAAMM,WAAU,SAACC,GAAD,OAAUA,EAAKV,KAAOO,EAASP,MAC1DW,EAAWR,EACfQ,EAASH,GAAUN,WAAY,EAC/BE,GAAS,8BAAUO,OAGrB,OACE,sBAAKK,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,+CACA,iCACE,8CACA,6BACGb,EAAMc,KAAI,SAACC,GAAD,OACT,6BACGA,EAAMhB,UACL,8BACE,cAAC,EAAD,CACEgB,MAAOA,EACPC,WAAYd,EACZe,WAAYN,MAIhB,8BACE,cAAC,EAAD,CACEI,MAAOA,EACPG,YAAa,SAACf,GAAD,OAtDP,SAACN,GAEvB,IAAIQ,EAAWL,EAAMM,WAAU,SAACC,GAAD,OAAUA,EAAKV,KAAOA,KACjDW,EAAWR,EACfQ,EAASH,GAAUN,WAAY,EAM/BE,GAAS,8BAAUO,MA4CiBW,CAAgBhB,IACpCiB,cAAe,kBA5DP,SAACL,GACzB,IAAIP,EAAWR,EAAMqB,QAAO,SAACd,GAAD,OAAUA,EAAKV,KAAOkB,EAAMlB,MACxDI,EAASO,GA0D4Bc,CAAkBP,SAdtCA,EAAMlB,SAqBnB,wBAAQgB,UAAU,kBAAkBU,QA9FrB,WACnB,IAAIf,EAAQ,sBACPR,GADO,CAEV,CACEJ,KAAM,OACNC,GAAIC,MACJC,WAAW,KAGfE,EAASO,IAqFL,iCAGA,wBAAQK,UAAU,kBAAkBU,QArFjB,WAIvB,IAAIf,EAAQ,sBACPR,GADO,CAEV,CACEJ,KAAM,GACNC,GAAIC,MACJC,WAAW,KAGfE,EAASO,IAyEL,iCAUFgB,EAAe,SAAC,GAA2C,IAAzCT,EAAwC,EAAxCA,MAAOG,EAAiC,EAAjCA,YAAaE,EAAoB,EAApBA,cAC1C,OACE,gCACE,wBACEG,QAAS,WACPH,EAAcL,IAFlB,oBAOA,wBACEQ,QAAS,WACPL,EAAYH,EAAMlB,KAFtB,kBAOCkB,EAAMnB,SAKP6B,EAAe,SAAC,GAAuC,IAArCV,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WACzC,OACE,8BACE,sBACES,SAAU,SAACvB,GACTc,EAAWd,EAAGY,IAFlB,SAKE,uBACEY,WAAS,EACTjB,MAAOK,EAAMnB,KACbgC,KAAK,OACL/B,GAAG,gBACHgC,SAAU,SAAC1B,GACTa,EAAWb,EAAGY,WC1K1Be,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.21073c73.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// import {useEffect} from 'react';\nimport './App.css';\nimport uniqid from 'uniqid';\n\nfunction App() {\n  const [tasks, setTasks] = useState([\n    {\n      text: 'first',\n      id: uniqid(),\n      isEditing: false,\n    },\n    {\n      text: 'second',\n      id: uniqid(),\n      isEditing: false,\n    },\n    {\n      text: 'shrek',\n      id: uniqid(),\n      isEditing: false,\n    },\n  ]);\n\n  // useEffect(() => {\n  //   console.log('hey - tasks changed');\n  // }, [tasks]);\n\n  // useEffect(() => {\n  //   console.log('useEffect for any of the states happened');\n  // });\n\n  const handleClick1 = () => {\n    let newTasks = [\n      ...tasks,\n      {\n        text: 'blah',\n        id: uniqid(),\n        isEditing: false,\n      },\n    ];\n    setTasks(newTasks);\n  };\n\n  const handleAddNewTask = () => {\n    // Add a new task to the list\n    // Open the list in edit mode to start typing\n    //  make sure it's focused^ <- this happens on the <input/>\n    let newTasks = [\n      ...tasks,\n      {\n        text: '',\n        id: uniqid(),\n        isEditing: true,\n      },\n    ];\n    setTasks(newTasks);\n  };\n\n  const handleDeleteClick = (aTask) => {\n    let newTasks = tasks.filter((item) => item.id !== aTask.id);\n    setTasks(newTasks);\n  };\n\n  const handleEditClick = (id) => {\n    // allow editing\n    let theIndex = tasks.findIndex((item) => item.id === id);\n    let newTasks = tasks;\n    newTasks[theIndex].isEditing = true;\n\n    // huh? this (prevTasks)=>[...newTasks] is better than setTasks(newTasks)\n    // because setTasks(newTasks)  wasn't rerendering on my screen until later\n\n    // setTasks(newTasks);\n    setTasks(() => [...newTasks]);\n    // setTasks((prevTasks) => [...prevTasks, '']);\n  };\n\n  function handleEditChange(e, thisTask) {\n    let theIndex = tasks.findIndex((item) => item.id === thisTask.id);\n    let newTasks = tasks;\n    newTasks[theIndex].text = e.target.value;\n\n    // setTasks(newTasks);\n    setTasks(() => [...newTasks]);\n  }\n\n  const handleEditSubmit = (e, thisTask) => {\n    // stop the page from refreshing when submitting the form\n    e.preventDefault();\n\n    //set isEditing to false now\n    let theIndex = tasks.findIndex((item) => item.id === thisTask.id);\n    let newTasks = tasks;\n    newTasks[theIndex].isEditing = false;\n    setTasks(() => [...newTasks]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Tiny CRUD - Functional Components</header>\n      <main>\n        <p>List of tasks</p>\n        <ul>\n          {tasks.map((aTask) => (\n            <li key={aTask.id}>\n              {aTask.isEditing ? (\n                <div>\n                  <EditTemplate\n                    aTask={aTask}\n                    editChange={handleEditChange}\n                    editSubmit={handleEditSubmit}\n                  />\n                </div>\n              ) : (\n                <div>\n                  <ViewTemplate\n                    aTask={aTask}\n                    editHandler={(e) => handleEditClick(e, aTask)}\n                    deleteHandler={() => handleDeleteClick(aTask)}\n                  />\n                </div>\n              )}\n            </li>\n          ))}\n        </ul>\n        <button className=\"not-list-button\" onClick={handleClick1}>\n          Add 'blah' to tasks\n        </button>\n        <button className=\"not-list-button\" onClick={handleAddNewTask}>\n          Add new Task\n        </button>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\nconst ViewTemplate = ({ aTask, editHandler, deleteHandler }) => {\n  return (\n    <div>\n      <button\n        onClick={() => {\n          deleteHandler(aTask);\n        }}\n      >\n        Delete\n      </button>\n      <button\n        onClick={() => {\n          editHandler(aTask.id);\n        }}\n      >\n        edit\n      </button>\n      {aTask.text}\n    </div>\n  );\n};\n\nconst EditTemplate = ({ aTask, editChange, editSubmit }) => {\n  return (\n    <div>\n      <form\n        onSubmit={(e) => {\n          editSubmit(e, aTask);\n        }}\n      >\n        <input\n          autoFocus\n          value={aTask.text}\n          type=\"text\"\n          id=\"taskEditInput\"\n          onChange={(e) => {\n            editChange(e, aTask);\n          }}\n        />\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}